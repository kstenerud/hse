diff -Naur hse-1.0/build.xml hse-1.1/build.xml
--- hse-1.0/build.xml	Mon Jul  3 16:59:10 2006
+++ hse-1.1/build.xml	Sat Jul  8 08:09:45 2006
@@ -3,7 +3,7 @@
 <project default="war" basedir="."        name="hse">
   <!-- Project Values -->
   <property name="project.package"         value="org.stenerud.hse"/>
-  <property name="project.version"         value="1.0"/>
+  <property name="project.version"         value="1.1"/>
   <property name="project.year"            value="2006"/>
 
   <property name="project.jar"             value="webapp/WEB-INF/lib/${ant.project.name}-${project.version}.jar"/>
diff -Naur hse-1.0/src/org/stenerud/hse/data/CriteriaBuffer.java hse-1.1/src/org/stenerud/hse/data/CriteriaBuffer.java
--- hse-1.0/src/org/stenerud/hse/data/CriteriaBuffer.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/data/CriteriaBuffer.java	Sat Jul  8 06:39:02 2006
@@ -198,14 +198,16 @@
 	}
 
 	/**
-	 * Make an HQL-friendly string from a boolean.
+	 * Make an HQL-friendly string from a boolean. <br>
+	 * NOTE: Thie returns the string contants 'true' or 'false'. If your database does not support this (e.g. Derby),
+	 * you will have to set database.substitutions in the application.properties file.
 	 * 
 	 * @param value the value to convert.
 	 * @return the converted value.
 	 */
 	private String makeHQLFriendly(boolean value)
 	{
-		return value ? "1" : "0";
+		return String.valueOf(value);
 	}
 
 	/**
diff -Naur hse-1.0/src/org/stenerud/hse/tools/ExceptionAnalyzer.java hse-1.1/src/org/stenerud/hse/tools/ExceptionAnalyzer.java
--- hse-1.0/src/org/stenerud/hse/tools/ExceptionAnalyzer.java	Wed Dec 31 16:00:00 1969
+++ hse-1.1/src/org/stenerud/hse/tools/ExceptionAnalyzer.java	Sat Jul  8 07:04:07 2006
@@ -0,0 +1,35 @@
+package org.stenerud.hse.tools;
+
+import org.springframework.jdbc.UncategorizedSQLException;
+import org.springframework.transaction.CannotCreateTransactionException;
+import org.springframework.transaction.TransactionSystemException;
+
+/**
+ * Analyzes exceptions and interprets what happened. <br>
+ * Unfortunately, we can't catch and interpret them in a DAO because it's being wrapped in a call pointcut by Spring's
+ * AOP transaction mechanism. If the DB goes down, it will be the transaction setup in the advice that throws the
+ * exception, and not a single line of code in the DAO will get called before the exception gets thrown.
+ * 
+ * @author Karl Stenerud
+ */
+public class ExceptionAnalyzer
+{
+	// ========== IMPLEMENTATION ==========
+
+	/**
+	 * Check if this exception resulted from loss of connectivity to the database.
+	 * 
+	 * @param exception the exception.
+	 * @return true if database connectivity has been lost.
+	 */
+	public static boolean isDatabaseDisconnect(Throwable exception)
+	{
+		/*
+		 * UncategorizedSQLException might be stretching things a bit, but postgresql throws out some pretty weird
+		 * errors. Take it out if it behaves badly with your DB.
+		 */
+		return (exception instanceof TransactionSystemException)
+				|| (exception instanceof CannotCreateTransactionException)
+				|| (exception instanceof UncategorizedSQLException);
+	}
+}
diff -Naur hse-1.0/src/org/stenerud/hse/tools/PropertyHelper.java hse-1.1/src/org/stenerud/hse/tools/PropertyHelper.java
--- hse-1.0/src/org/stenerud/hse/tools/PropertyHelper.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/tools/PropertyHelper.java	Fri Jul  7 21:52:57 2006
@@ -1,8 +1,10 @@
 package org.stenerud.hse.tools;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.Collection;
+import java.util.Date;
 import java.util.Enumeration;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -14,16 +16,31 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.springframework.core.io.Resource;
+
 /**
- * Loads data from property files on the classpath
+ * Auto-refreshing properties access class that provides a more functional interface than Properties.
  * 
  * @author Karl Stenerud
  */
 public class PropertyHelper
 {
+	// ========== CONSTANTS ==========
+	private static final long DEFAULT_CHECK_INTERVAL = 600000; // 60 seconds
+
+	/**
+	 * Pattern to capture escape sequences. Escape sequences are in the format "${anystring}".
+	 */
+	private static final Pattern escapePattern = Pattern.compile("\\Q${\\E([^}]*)}");
+
 	// ========== INJECTED MEMBERS ==========
-	private String propertiesPath;
 	private Properties properties;
+	private File file;
+	private long checkInterval = DEFAULT_CHECK_INTERVAL;
+
+	// ========== PRIVATE MEMBERS ==========
+	private long lastChecked = 0;
+	private long lastModified = 0;
 
 	// ========== IMPLEMENTATION ==========
 
@@ -34,6 +51,7 @@
 	 */
 	public Collection getPropertyNames()
 	{
+		checkRefresh();
 		List list = new LinkedList();
 		for ( Enumeration names = properties.propertyNames(); names.hasMoreElements(); )
 		{
@@ -50,6 +68,7 @@
 	 */
 	public Collection getPropertyNames(String regex)
 	{
+		checkRefresh();
 		Pattern pattern = Pattern.compile(regex);
 		Set results = new TreeSet();
 		for ( Enumeration names = properties.propertyNames(); names.hasMoreElements(); )
@@ -71,6 +90,7 @@
 	 */
 	public boolean hasProperty(String name)
 	{
+		checkRefresh();
 		return properties.containsKey(name);
 	}
 
@@ -83,6 +103,7 @@
 	 */
 	public String getString(String name)
 	{
+		checkRefresh();
 		String result = properties.getProperty(name);
 		if ( null == result )
 		{
@@ -100,6 +121,7 @@
 	 */
 	public String getString(String name, String defaultValue)
 	{
+		checkRefresh();
 		try
 		{
 			return expandString(properties.getProperty(name, defaultValue));
@@ -216,25 +238,6 @@
 	}
 
 	/**
-	 * Make a list of strings from a source string, using the specified separator.
-	 * 
-	 * @param value the string to split.
-	 * @param separator the separatoe value.
-	 * @return the split string list.
-	 */
-	private List makeStringList(String value, String separator)
-	{
-		List list = new LinkedList();
-		StringTokenizer st = new StringTokenizer(value, separator);
-		while ( st.hasMoreTokens() )
-		{
-			String token = st.nextToken().trim();
-			list.add(token);
-		}
-		return list;
-	}
-
-	/**
 	 * Get a list of integers from a property.
 	 * 
 	 * @param name the name of the property.
@@ -267,27 +270,6 @@
 	}
 
 	/**
-	 * Convert a list of strings into a list of integers.
-	 * 
-	 * @param strings the strings to convert.
-	 * @return a list of integers.
-	 */
-	private List makeIntegerList(List strings)
-	{
-		List result = new LinkedList();
-		for ( Iterator iter = strings.iterator(); iter.hasNext(); )
-		{
-			result.add(new Integer((String)iter.next()));
-		}
-		return result;
-	}
-
-	/**
-	 * Pattern to capture escape sequences. Escape sequences are in the format "${anystring}".
-	 */
-	private static final Pattern escapePattern = Pattern.compile("\\Q${\\E([^}]*)}");
-
-	/**
 	 * Routine to interpret and expand any escaped strings in a value. <br>
 	 * Escape strings are in the format "${something}". All escaped strings must refer to a property in the properties
 	 * file. <br>
@@ -344,20 +326,89 @@
 		}
 	}
 
-	// ========== GETTERS AND SETTERS ==========
+	// ========== UTILITY METHODS ==========
+
+	/**
+	 * Check if the properties file has changed, and reload if necessary. <br>
+	 * This will only do an actual check once every check interval.
+	 */
+	private void checkRefresh()
+	{
+		if ( null != file )
+		{
+			long nowTime = new Date().getTime();
+			if ( nowTime - lastChecked > checkInterval )
+			{
+				if ( file.lastModified() != lastModified )
+				{
+					FileInputStream stream = null;
+					try
+					{
+						properties = new Properties();
+						stream = new FileInputStream(file);
+						properties.load(stream);
+					}
+					catch ( IOException ex )
+					{
+						throw new PropertyNotFoundException("Properties file " + file + " not found");
+					}
+					finally
+					{
+						if ( null != stream )
+						{
+							try
+							{
+								stream.close();
+							}
+							catch ( IOException ex )
+							{
+								// Ignore
+							}
+						}
+					}
+				}
+				lastChecked = nowTime;
+			}
+		}
+	}
 
-	public String getPropertiesPath()
+	/**
+	 * Make a list of strings from a source string, using the specified separator.
+	 * 
+	 * @param value the string to split.
+	 * @param separator the separatoe value.
+	 * @return the split string list.
+	 */
+	private List makeStringList(String value, String separator)
 	{
-		return propertiesPath;
+		List list = new LinkedList();
+		StringTokenizer st = new StringTokenizer(value, separator);
+		while ( st.hasMoreTokens() )
+		{
+			String token = st.nextToken().trim();
+			list.add(token);
+		}
+		return list;
 	}
 
-	public void setPropertiesPath(String propertiesPath) throws IOException
+	/**
+	 * Convert a list of strings into a list of integers.
+	 * 
+	 * @param strings the strings to convert.
+	 * @return a list of integers.
+	 */
+	private List makeIntegerList(List strings)
 	{
-		this.propertiesPath = propertiesPath;
-		properties = new Properties();
-		properties.load(this.getClass().getClassLoader().getResourceAsStream(propertiesPath));
+		List result = new LinkedList();
+		for ( Iterator iter = strings.iterator(); iter.hasNext(); )
+		{
+			result.add(new Integer((String)iter.next()));
+		}
+		return result;
 	}
 
+	// ========== GETTERS AND SETTERS ==========
+
 	public Properties getProperties()
 	{
 		return properties;
@@ -365,6 +416,34 @@
 
 	public void setProperties(Properties properties)
 	{
+		this.file = null;
 		this.properties = properties;
+	}
+
+	/**
+	 * Get the interval that the property helper checks the property file for changes.
+	 * 
+	 * @return the interval in milliseconds.
+	 */
+	public long getCheckInterval()
+	{
+		return checkInterval;
+	}
+
+	/**
+	 * Set the interval that the property helper checks the property file for changes.
+	 * 
+	 * @param checkInterval the interval in milliseconds.
+	 */
+	public void setCheckInterval(long checkInterval)
+	{
+		this.checkInterval = checkInterval;
+	}
+
+	public void setResource(Resource resource) throws IOException
+	{
+		file = resource.getFile();
+		properties = new Properties();
+		properties.load(resource.getInputStream());
 	}
 }
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/ApplicationHelper.java hse-1.1/src/org/stenerud/hse/ui/echo2/ApplicationHelper.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/ApplicationHelper.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/ApplicationHelper.java	Wed Jul  5 19:36:00 2006
@@ -74,6 +74,14 @@
 	}
 
 	/**
+	 * Return to the main screen.
+	 */
+	public static void returnToMain()
+	{
+		Echo2UserInterface.getCurrent().showMainScreen();
+	}
+
+	/**
 	 * End the current session.
 	 */
 	public static void endSession()
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/CustomWindowPane.java hse-1.1/src/org/stenerud/hse/ui/echo2/CustomWindowPane.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/CustomWindowPane.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/CustomWindowPane.java	Sat Jul  8 06:46:34 2006
@@ -4,7 +4,9 @@
 import nextapp.echo2.app.Extent;
 import nextapp.echo2.app.WindowPane;
 
+import org.stenerud.hse.tools.ExceptionAnalyzer;
 import org.stenerud.hse.ui.Messages;
+import org.stenerud.hse.ui.echo2.components.OkRequestor;
 
 /**
  * Custom WindowPane component to give some convenience methods.
@@ -81,6 +83,21 @@
 	protected void popupWindow(String uri)
 	{
 		ApplicationHelper.popupWindow(uri);
+	}
+
+	/**
+	 * Handle a database disconnect exception.
+	 */
+	protected boolean handleException(Throwable t)
+	{
+		if ( ExceptionAnalyzer.isDatabaseDisconnect(t) )
+		{
+			OkRequestor requestor = new OkRequestor(messages.get("error.noConnection.title"), messages
+					.get("error.noConnection.description"), messages.get("answer.ok"));
+			ApplicationHelper.displayRequestor(requestor);
+			return true;
+		}
+		return false;
 	}
 
 	// ========== GETTERS AND SETTERS ==========
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/Echo2UserInterface.java hse-1.1/src/org/stenerud/hse/ui/echo2/Echo2UserInterface.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/Echo2UserInterface.java	Mon Jul  3 12:32:16 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/Echo2UserInterface.java	Fri Jul  7 23:01:55 2006
@@ -320,28 +320,25 @@
 	 */
 	private void setScreen(Screen content)
 	{
-		if ( content == this.content )
+		if ( null != this.content )
 		{
-			if ( this.content.leave() )
+			if ( !this.content.leave() )
 			{
-				this.content.enter();
+				return;
 			}
-			return;
-		}
 
-		if ( null != this.content )
-		{
-			mainContainer.remove((Component)this.content);
-			if ( !this.content.leave() )
+			if ( content == this.content )
 			{
 				return;
 			}
+
+			mainContainer.remove((Component)this.content);
 		}
+
 		this.content = content;
-		this.content.enter();
 		mainContainer.add((Component)this.content);
-
 		setTitle(content.getTitle());
+		this.content.enter();
 	}
 
 	/**
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/MainMenu.java hse-1.1/src/org/stenerud/hse/ui/echo2/MainMenu.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/MainMenu.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/MainMenu.java	Wed Jul  5 19:03:00 2006
@@ -25,7 +25,7 @@
 	/**
 	 * Add a menu.
 	 * 
-	 * @param parent the parent to add the menu to.  Null = this MainMenu.
+	 * @param parent the parent to add the menu to. Null = this MainMenu.
 	 * @param style the style to apply.
 	 * @param name the name to display.
 	 * @return the new menu.
@@ -39,12 +39,12 @@
 		menu.setMenuAlwaysOnTop(true);
 		menu.setClickToOpen(true);
 
-		if(STYLE_MENUBAR.equals(style))
+		if ( STYLE_MENUBAR.equals(style) )
 		{
 			menu.setSubmenuImage(Theme.getImage(Images.EMPTY));
 		}
 
-		if(null == parent)
+		if ( null == parent )
 		{
 			parent = this;
 		}
@@ -57,7 +57,7 @@
 	/**
 	 * Add a menu item.
 	 * 
-	 * @param parent the parent to add the menu to.  Null = this MainMenu.
+	 * @param parent the parent to add the menu to. Null = this MainMenu.
 	 * @param style the style to apply.
 	 * @param name the name to display.
 	 * @return the new menu item
@@ -67,7 +67,7 @@
 		MenuItem item = new MenuItem(name);
 		item.setStyleName(style);
 
-		if(null == parent)
+		if ( null == parent )
 		{
 			parent = this;
 		}
@@ -80,7 +80,7 @@
 	/**
 	 * Add a menu item.
 	 * 
-	 * @param parent the parent to add the menu to.  Null = this MainMenu.
+	 * @param parent the parent to add the menu to. Null = this MainMenu.
 	 * @param style the style to apply.
 	 * @param name the name to display.
 	 * @param listener the action listenet to notify when this item is clicked.
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/ColumnScreen.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/ColumnScreen.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/ColumnScreen.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/ColumnScreen.java	Sat Jul  8 06:46:34 2006
@@ -5,6 +5,7 @@
 import nextapp.echo2.app.event.ActionListener;
 
 import org.stenerud.hse.data.DataException;
+import org.stenerud.hse.tools.ExceptionAnalyzer;
 import org.stenerud.hse.ui.Messages;
 import org.stenerud.hse.ui.echo2.ApplicationHelper;
 import org.stenerud.hse.ui.echo2.components.OkRequestor;
@@ -148,6 +149,19 @@
 		{
 			box.addActionListener(new ValidationExceptionListener((ComponentValidationException)ex));
 		}
+	}
+
+	/**
+	 * Handle a database disconnect exception.
+	 */
+	protected boolean handleException(Throwable t)
+	{
+		if ( ExceptionAnalyzer.isDatabaseDisconnect(t) )
+		{
+			openInfoRequestor(messages.get("error.noConnection.title"), messages.get("error.noConnection.description"));
+			return true;
+		}
+		return false;
 	}
 
 	// ========== GETTERS AND SETTERS ==========
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/PaneScreen.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/PaneScreen.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/PaneScreen.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/PaneScreen.java	Sat Jul  8 06:46:34 2006
@@ -5,6 +5,7 @@
 import nextapp.echo2.app.event.ActionListener;
 
 import org.stenerud.hse.data.DataException;
+import org.stenerud.hse.tools.ExceptionAnalyzer;
 import org.stenerud.hse.ui.Messages;
 import org.stenerud.hse.ui.echo2.ApplicationHelper;
 import org.stenerud.hse.ui.echo2.components.OkRequestor;
@@ -147,6 +148,19 @@
 		{
 			box.addActionListener(new ValidationExceptionListener((ComponentValidationException)ex));
 		}
+	}
+
+	/**
+	 * Handle a database disconnect exception.
+	 */
+	protected boolean handleException(Throwable t)
+	{
+		if ( ExceptionAnalyzer.isDatabaseDisconnect(t) )
+		{
+			openInfoRequestor(messages.get("error.noConnection.title"), messages.get("error.noConnection.description"));
+			return true;
+		}
+		return false;
 	}
 
 	// ========== GETTERS AND SETTERS ==========
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/Screens.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/Screens.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/Screens.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/Screens.java	Wed Jul  5 19:03:00 2006
@@ -4,7 +4,6 @@
  * Holds the names of all the screens.
  * 
  * @author Karl Stenerud
- *
  */
 public interface Screens
 {
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/groups/GroupEditRequestor.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/groups/GroupEditRequestor.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/groups/GroupEditRequestor.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/groups/GroupEditRequestor.java	Wed Jul  5 19:23:00 2006
@@ -124,6 +124,14 @@
 				handleValidationException(ex);
 				return false;
 			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+				return false;
+			}
 		}
 		return true;
 
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/groups/GroupScreen.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/groups/GroupScreen.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/groups/GroupScreen.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/groups/GroupScreen.java	Wed Jul  5 19:15:00 2006
@@ -51,7 +51,17 @@
 
 		public void actionPerformed(ActionEvent e)
 		{
-			processEditConfirm(row);
+			try
+			{
+				processEditConfirm(row);
+			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+			}
 		}
 
 		public void setRow(int row)
@@ -80,7 +90,17 @@
 
 		public void actionPerformed(ActionEvent e)
 		{
-			processDeleteConfirm(row);
+			try
+			{
+				processDeleteConfirm(row);
+			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+			}
 		}
 
 		public void setRow(int row)
@@ -138,7 +158,17 @@
 
 			public void actionPerformed(ActionEvent e)
 			{
-				processNewConfirm();
+				try
+				{
+					processNewConfirm();
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
+				}
 			}
 		});
 
@@ -155,9 +185,19 @@
 
 			public void actionPerformed(ActionEvent ev)
 			{
-				if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+				try
 				{
-					processEdit();
+					if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+					{
+						processEdit();
+					}
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
 				}
 			}
 		});
@@ -169,9 +209,19 @@
 
 			public void actionPerformed(ActionEvent ev)
 			{
-				if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+				try
 				{
-					processNew();
+					if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+					{
+						processNew();
+					}
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
 				}
 			}
 		});
@@ -179,9 +229,20 @@
 
 	protected void resetComponents()
 	{
-		newButton.setVisible(groupBusiness.canCreate());
-		tableModel.clear();
-		doView();
+		try
+		{
+			newButton.setVisible(groupBusiness.canCreate());
+			tableModel.clear();
+			doView();
+		}
+		catch ( RuntimeException ex )
+		{
+			if ( !handleException(ex) )
+			{
+				throw ex;
+			}
+			ApplicationHelper.returnToMain();
+		}
 	}
 
 	// ========== UTILITY METHODS ==========
@@ -291,9 +352,19 @@
 
 					public void actionPerformed(ActionEvent e)
 					{
-						if ( TrueFalseRequestor.commandIsTrue(e) )
+						try
+						{
+							if ( TrueFalseRequestor.commandIsTrue(e) )
+							{
+								processDelete();
+							}
+						}
+						catch ( RuntimeException ex )
 						{
-							processDelete();
+							if ( !handleException(ex) )
+							{
+								throw ex;
+							}
 						}
 					}
 				});
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/login/LoginScreen.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/login/LoginScreen.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/login/LoginScreen.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/login/LoginScreen.java	Wed Jul  5 19:03:00 2006
@@ -70,7 +70,17 @@
 
 			public void actionPerformed(ActionEvent event)
 			{
-				processLogin();
+				try
+				{
+					processLogin();
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
+				}
 			}
 		});
 
@@ -82,7 +92,17 @@
 
 			public void actionPerformed(ActionEvent event)
 			{
-				processLogin();
+				try
+				{
+					processLogin();
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
+				}
 			}
 		});
 	}
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/users/UserEditRequestor.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/users/UserEditRequestor.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/users/UserEditRequestor.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/users/UserEditRequestor.java	Wed Jul  5 19:03:00 2006
@@ -97,34 +97,45 @@
 
 	protected void resetComponents()
 	{
-		buildGroupField(groupFieldHelper.getManagedField());
-		if ( isCreateNew() )
+		try
 		{
-			this.setTitle(messages.get("prompt.user.new.title"));
-			this.setMessage(messages.get("prompt.user.new.description"));
-			nameField.setText("");
-			passwordField.setText("");
-			administrator = false;
-
-			// Get the group field off the administrator group, if possible.
-			if ( groupFieldHelper.getSize() > 1 )
+			buildGroupField(groupFieldHelper.getManagedField());
+			if ( isCreateNew() )
 			{
-				groupFieldHelper.setSelectedIndex(1);
+				this.setTitle(messages.get("prompt.user.new.title"));
+				this.setMessage(messages.get("prompt.user.new.description"));
+				nameField.setText("");
+				passwordField.setText("");
+				administrator = false;
+
+				// Get the group field off the administrator group, if possible.
+				if ( groupFieldHelper.getSize() > 1 )
+				{
+					groupFieldHelper.setSelectedIndex(1);
+				}
+				else
+				{
+					groupFieldHelper.setSelectedIndex(0);
+				}
 			}
 			else
 			{
-				groupFieldHelper.setSelectedIndex(0);
+				this.setTitle(messages.get("prompt.user.edit.title"));
+				this.setMessage(messages.get("prompt.user.edit.description"));
+				nameField.setText(name);
+				passwordField.setText(password);
+				groupFieldHelper.setSelectedItem(group);
 			}
+			setFocusedComponent(nameField);
 		}
-		else
+		catch ( RuntimeException ex )
 		{
-			this.setTitle(messages.get("prompt.user.edit.title"));
-			this.setMessage(messages.get("prompt.user.edit.description"));
-			nameField.setText(name);
-			passwordField.setText(password);
-			groupFieldHelper.setSelectedItem(group);
+			if ( !handleException(ex) )
+			{
+				throw ex;
+			}
+			getParent().remove(UserEditRequestor.this);
 		}
-		setFocusedComponent(nameField);
 	}
 
 	protected boolean handleAction(ActionEvent ev)
@@ -143,6 +154,14 @@
 				handleValidationException(ex);
 				return false;
 			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+				return false;
+			}
 		}
 		return true;
 
@@ -153,6 +172,7 @@
 	private void buildGroupField(SelectField field)
 	{
 		groupFieldHelper = new SelectFieldHelper();
+		groupFieldHelper.manageField(field);
 		if ( administrator )
 		{
 			groupFieldHelper.addItem(group.getName(), group);
@@ -170,7 +190,6 @@
 			Group nextGroup = currentUser.get().getUserGroup();
 			groupFieldHelper.addItem(nextGroup.getName(), nextGroup);
 		}
-		groupFieldHelper.manageField(field);
 	}
 
 	// ========== GETTERS AND SETTERS ==========
diff -Naur hse-1.0/src/org/stenerud/hse/ui/echo2/screen/users/UserScreen.java hse-1.1/src/org/stenerud/hse/ui/echo2/screen/users/UserScreen.java
--- hse-1.0/src/org/stenerud/hse/ui/echo2/screen/users/UserScreen.java	Mon Jul  3 07:44:22 2006
+++ hse-1.1/src/org/stenerud/hse/ui/echo2/screen/users/UserScreen.java	Wed Jul  5 19:18:00 2006
@@ -16,7 +16,6 @@
 
 import org.stenerud.hse.business.user.UserBusiness;
 import org.stenerud.hse.data.group.Group;
-import org.stenerud.hse.data.security.SecurityDAO;
 import org.stenerud.hse.data.user.User;
 import org.stenerud.hse.security.CurrentUser;
 import org.stenerud.hse.ui.echo2.ApplicationHelper;
@@ -54,7 +53,17 @@
 
 		public void actionPerformed(ActionEvent e)
 		{
-			processEditConfirm(row);
+			try
+			{
+				processEditConfirm(row);
+			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+			}
 		}
 
 		public void setRow(int row)
@@ -83,7 +92,17 @@
 
 		public void actionPerformed(ActionEvent e)
 		{
-			processDeleteConfirm(row);
+			try
+			{
+				processDeleteConfirm(row);
+			}
+			catch ( RuntimeException ex )
+			{
+				if ( !handleException(ex) )
+				{
+					throw ex;
+				}
+			}
 		}
 
 		public void setRow(int row)
@@ -106,7 +125,6 @@
 
 	// ========== INJECTED MEMBERS ==========
 	private UserBusiness userBusiness;
-	private SecurityDAO securityDAO;
 	private CurrentUser currentUser;
 	private UserTableModel tableModel;
 	private UserTable table;
@@ -143,7 +161,17 @@
 
 			public void actionPerformed(ActionEvent e)
 			{
-				processNewConfirm();
+				try
+				{
+					processNewConfirm();
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
+				}
 			}
 		});
 
@@ -161,7 +189,17 @@
 
 			public void actionPerformed(ActionEvent arg0)
 			{
-				processView();
+				try
+				{
+					processView();
+				}
+				catch ( RuntimeException ex )
+				{
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
+				}
 			}
 		});
 		groupFieldHelper = new SelectFieldHelper();
@@ -180,9 +218,19 @@
 
 			public void actionPerformed(ActionEvent ev)
 			{
-				if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+				try
+				{
+					if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+					{
+						processEdit();
+					}
+				}
+				catch ( RuntimeException ex )
 				{
-					processEdit();
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
 				}
 			}
 		});
@@ -194,9 +242,19 @@
 
 			public void actionPerformed(ActionEvent ev)
 			{
-				if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+				try
+				{
+					if ( ev.getActionCommand().equals(TrueFalseRequestor.COMMAND_TRUE) )
+					{
+						processNew();
+					}
+				}
+				catch ( RuntimeException ex )
 				{
-					processNew();
+					if ( !handleException(ex) )
+					{
+						throw ex;
+					}
 				}
 			}
 		});
@@ -204,11 +262,22 @@
 
 	protected void resetComponents()
 	{
-		buildGroupField(groupFieldHelper.getManagedField());
-		groupFieldHelper.setSelectedIndex(0);
-		newButton.setVisible(userBusiness.canCreateInOwnGroup());
-		tableModel.clear();
-		doView();
+		try
+		{
+			buildGroupField(groupFieldHelper.getManagedField());
+			groupFieldHelper.setSelectedIndex(0);
+			newButton.setVisible(userBusiness.canCreateInOwnGroup());
+			tableModel.clear();
+			doView();
+		}
+		catch ( RuntimeException ex )
+		{
+			if ( !handleException(ex) )
+			{
+				throw ex;
+			}
+			ApplicationHelper.returnToMain();
+		}
 	}
 
 	// ========== UTILITY METHODS ==========
@@ -216,6 +285,7 @@
 	private void buildGroupField(SelectField field)
 	{
 		groupFieldHelper = new SelectFieldHelper();
+		groupFieldHelper.manageField(field);
 		if ( userBusiness.canListAllUsers() )
 		{
 			groupFieldHelper.addItem(ALL_GROUPS, ALL_GROUPS);
@@ -230,7 +300,6 @@
 			Group nextGroup = currentUser.get().getUserGroup();
 			groupFieldHelper.addItem(nextGroup.getName(), nextGroup);
 		}
-		groupFieldHelper.manageField(field);
 	}
 
 	private void doView()
@@ -316,9 +385,19 @@
 
 					public void actionPerformed(ActionEvent e)
 					{
-						if ( TrueFalseRequestor.commandIsTrue(e) )
+						try
+						{
+							if ( TrueFalseRequestor.commandIsTrue(e) )
+							{
+								processDelete();
+							}
+						}
+						catch ( RuntimeException ex )
 						{
-							processDelete();
+							if ( !handleException(ex) )
+							{
+								throw ex;
+							}
 						}
 					}
 				});
@@ -360,16 +439,6 @@
 	public void setNewRequestor(UserEditRequestor newRequestor)
 	{
 		this.newRequestor = newRequestor;
-	}
-
-	public SecurityDAO getSecurityDAO()
-	{
-		return securityDAO;
-	}
-
-	public void setSecurityDAO(SecurityDAO securityDAO)
-	{
-		this.securityDAO = securityDAO;
 	}
 
 	public UserTable getTable()
diff -Naur hse-1.0/webapp/WEB-INF/application.properties hse-1.1/webapp/WEB-INF/application.properties
--- hse-1.0/webapp/WEB-INF/application.properties	Wed Dec 31 16:00:00 1969
+++ hse-1.1/webapp/WEB-INF/application.properties	Sat Jul  8 08:02:05 2006
@@ -0,0 +1,41 @@
+# Database settings
+
+# Derby DB (10.1.3.1)
+hibernate.dialect=org.hibernate.dialect.DerbyDialect
+# Uncomment these two lines for the normal client driver.
+#database.driverClassName=org.apache.derby.jdbc.ClientDriver
+#database.url=jdbc:derby://localhost:1527/hsedb;create=true
+# Uncomment these two lines for the embedded driver.
+database.driverClassName=org.apache.derby.jdbc.EmbeddedDriver
+database.url=jdbc:derby:hsedb;create=true
+database.username=hse
+database.password=hse
+database.testQuery=SELECT count(*) FROM HSEGroup
+database.substitutions=true 1, false 0
+
+# PostgreSQL DB (8.1)
+#hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
+#database.driverClassName=org.postgresql.Driver
+#database.url=jdbc:postgresql://localhost/hsedb
+#database.username=hse
+#database.password=hse
+#database.testQuery=SELECT 1
+#database.substitutions=
+
+
+# Determine behavior when a user logs out.
+# If true, the application returns to the login screen.
+# If false, the session is ended and the user is redirected to the location
+# specified by endSession.redirect
+logout.returnToLogin=true
+
+# Location where the user will be redirected when their session ends.
+endSession.redirect=app
+
+# Allow modification of the administrator account.
+administrator.group.allowUpdate=false
+administrator.user.allowUpdate=false
+
+# Default name and password for the administrator user.
+administrator.defaultName=admin
+administrator.defaultPassword=adminchangeme
diff -Naur hse-1.0/webapp/WEB-INF/applicationContext.xml hse-1.1/webapp/WEB-INF/applicationContext.xml
--- hse-1.0/webapp/WEB-INF/applicationContext.xml	Mon Jul  3 16:34:54 2006
+++ hse-1.1/webapp/WEB-INF/applicationContext.xml	Sun Jul  9 08:04:34 2006
@@ -16,28 +16,39 @@
     </bean>
     -->
 
-	<!-- Use this for an application-supplied data source -->
+	<!-- Use this for an application-supplied dbcp pooled data source
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
 		<property name="driverClassName"><value>${database.driverClassName}</value></property>
         <property name="url"><value>${database.url}</value></property>
         <property name="username"><value>${database.username}</value></property>
         <property name="password"><value>${database.password}</value></property>
 	</bean>
+	-->
 
+	<!-- Use this for an application-supplied c3p0 pooled data source -->
+	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
+		<property name="driverClass" value="${database.driverClassName}" />
+		<property name="jdbcUrl" value="${database.url}" />
+		<property name="user" value="${database.username}" />
+		<property name="password" value="${database.password}" />
+		<property name="preferredTestQuery" value="${database.testQuery}" />
+		<property name="acquireRetryAttempts" value="5" />
+		<property name="acquireRetryDelay" value="1000" />
+		<property name="checkoutTimeout" value="10000" />
+		<property name="maxPoolSize" value="30" />
+		<property name="idleConnectionTestPeriod" value="60" />
+		<property name="testConnectionOnCheckin" value="true" />
+		<property name="testConnectionOnCheckout" value="false" />
+	</bean>
 
 	<!-- Hibernate -->
 	<bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
 		<property name="properties">
 			<props>
 				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
+				<prop key="hibernate.query.substitutions">${database.substitutions}</prop>
 				<prop key="hibernate.hbm2ddl.auto">update</prop>
-				<prop key="hibernate.query.substitutions">true 'T', false 'F'</prop>
 				<prop key="hibernate.show_sql">false</prop>
-				<prop key="hibernate.c3p0.minPoolSize">5</prop>
-				<prop key="hibernate.c3p0.maxPoolSize">20</prop>
-				<prop key="hibernate.c3p0.timeout">600</prop>
-				<prop key="hibernate.c3p0.max_statement">50</prop>
-				<prop key="hibernate.c3p0.testConnectionOnCheckout">false</prop>
 			</props>
 		</property>
 	</bean>
@@ -78,7 +89,11 @@
       <property name="transactionManager"><ref local="transactionManager"/></property>
       <property name="transactionAttributes">
         <props>
-          <prop key="*">PROPAGATION_REQUIRED</prop>
+          <prop key="create*">PROPAGATION_REQUIRED</prop>
+          <prop key="update*">PROPAGATION_REQUIRED</prop>
+          <prop key="delete*">PROPAGATION_REQUIRED</prop>
+          <prop key="getOrCreate*">PROPAGATION_REQUIRED</prop>
+          <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
         </props>
       </property>
     </bean>
@@ -159,14 +174,20 @@
 
 	<!-- Properties -->
 
-    <!-- All of the properties files are at the top of the classpath. -->
-	<bean id="applicationProperties" class="org.stenerud.hse.tools.PropertyHelper">
-		<property name="propertiesPath"><value>application.properties</value></property>
+	<!-- The resource containing application.properties. -->
+	<bean id="applicationPropertiesResource" class="org.springframework.web.context.support.ServletContextResource">
+		<constructor-arg index="0">
+        	<bean class="org.springframework.web.context.support.ServletContextFactoryBean"/>
+        </constructor-arg>
+        <constructor-arg index="1">
+            <value>/WEB-INF/application.properties</value>
+        </constructor-arg> 
 	</bean>
 
-	<!-- Same application properties, as a Spring Resource for the configurer. -->
-	<bean id="applicationPropertiesResource" class="org.springframework.core.io.ClassPathResource">
-		<constructor-arg><value>application.properties</value></constructor-arg>
+    <!-- application.properties as a PropertyHelper. -->
+	<bean id="applicationProperties" class="org.stenerud.hse.tools.PropertyHelper">
+		<property name="resource"><ref bean="applicationPropertiesResource"/></property>
+		<property name="checkInterval" value="10000"/> <!-- 10 seconds -->
 	</bean>
 
 
@@ -286,7 +307,6 @@
 		<property name="newRequestor"><ref local="userEditRequestor"/></property>
 		<property name="editRequestor"><ref local="userEditRequestor"/></property>
 		<property name="table"><ref local="userTable"/></property>
-		<property name="securityDAO"><ref bean="securityDAO"/></property>
 	</bean>
 
 	<bean id="userEditRequestor" class="org.stenerud.hse.ui.echo2.screen.users.UserEditRequestor" singleton="false">
diff -Naur hse-1.0/webapp/WEB-INF/classes/Messages.properties hse-1.1/webapp/WEB-INF/classes/Messages.properties
--- hse-1.0/webapp/WEB-INF/classes/Messages.properties	Mon Jul  3 07:19:42 2006
+++ hse-1.1/webapp/WEB-INF/classes/Messages.properties	Fri Jul  7 11:32:31 2006
@@ -26,7 +26,8 @@
 error.data=Data Error
 error.error=Error
 error.loginFail=The credentials you provided were incorrect
-
+error.noConnection.title=Database Connection Lost
+error.noConnection.description=The connection to the database has been lost.  Please try again in a few minutes.
 
 field.blank=
 field.group=Group
diff -Naur hse-1.0/webapp/WEB-INF/classes/application.properties hse-1.1/webapp/WEB-INF/classes/application.properties
--- hse-1.0/webapp/WEB-INF/classes/application.properties	Mon Jul  3 15:22:00 2006
+++ hse-1.1/webapp/WEB-INF/classes/application.properties	Wed Dec 31 16:00:00 1969
@@ -1,23 +0,0 @@
-# Database settings
-hibernate.dialect=org.hibernate.dialect.DerbyDialect
-database.driverClassName=org.apache.derby.jdbc.EmbeddedDriver
-database.url=jdbc:derby:hsedb;create=true
-database.username=hse
-database.password=hse
-
-# Determine behavior when a user logs out.
-# If true, the application returns to the login screen.
-# If false, the session is ended and the user is redirected to the location
-# specified by endSession.redirect
-logout.returnToLogin=false
-
-# Location where the user will be redirected when their session ends.
-endSession.redirect=/hse
-
-# Allow modification of the administrator account.
-administrator.group.allowUpdate=false
-administrator.user.allowUpdate=false
-
-# Default name and password for the administrator user.
-administrator.defaultName=admin
-administrator.defaultPassword=adminchangeme
